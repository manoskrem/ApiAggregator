using ApiAggregator.Configuration;
using ApiAggregator.Middleware;
using ApiAggregator.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Polly;
using Polly.Extensions.Http;
using Refit;
using System.Net.Http.Headers;
using System.Reflection;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    // Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    // ... and tell Swagger to use those XML comments.
    options.IncludeXmlComments(xmlPath);

    // Add JWT Authentication to Swagger
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = @"JWT Authorization header using the Bearer scheme. \r\n\r\n 
                      Enter 'Bearer' [space] and then your token in the text input below.
                      \r\n\r\nExample: 'Bearer 12345abcdef'",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });

    options.AddSecurityRequirement(new OpenApiSecurityRequirement()
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                },
                Scheme = "oauth2",
                Name = "Bearer",
                In = ParameterLocation.Header,
            },
            new List<string>()
        }
    });
});

// Bind configuration sections
builder.Services.Configure<ApiSettings>(builder.Configuration.GetSection("ApiKeys"));
builder.Services.Configure<JwtSettings>(builder.Configuration.GetSection("Jwt"));

// Add caching service
builder.Services.AddMemoryCache();

// Register AggregationService and AggregationServiceDecorator
builder.Services.AddScoped<AggregationService>();
builder.Services.AddScoped<IAggregationService>(provider =>
{
    var innerService = provider.GetRequiredService<AggregationService>();
    var cache = provider.GetRequiredService<IMemoryCache>();
    return new AggregationServiceDecorator(innerService, cache);
});

// Add Polly policies
IAsyncPolicy<HttpResponseMessage> retryPolicy = HttpPolicyExtensions
    .HandleTransientHttpError()
    .WaitAndRetryAsync(3, retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));

// Configure Refit clients with Polly retry policy
builder.Services.AddRefitClient<IWeatherService>()
    .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.openweathermap.org"))
    .AddPolicyHandler(retryPolicy);

builder.Services.AddRefitClient<INewsService>()
    .ConfigureHttpClient(c =>
    {
        c.BaseAddress = new Uri("https://newsapi.org");
        c.DefaultRequestHeaders.UserAgent.ParseAdd("ApiAggregator/1.0");
    })
    .AddPolicyHandler(retryPolicy);

// Add new Refit clients
builder.Services.AddRefitClient<IGitHubService>()
    .ConfigureHttpClient(c =>
    {
        c.BaseAddress = new Uri("https://api.github.com");
        c.DefaultRequestHeaders.UserAgent.ParseAdd("ApiAggregator/1.0");
        c.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("token", builder.Configuration["ApiKeys:GitHubToken"]);
    })
    .AddPolicyHandler(retryPolicy);

builder.Services.AddRefitClient<ICoinGeckoService>()
    .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.coingecko.com/api/v3"))
    .AddPolicyHandler(retryPolicy);

// Add authentication and authorization
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    var jwtSettings = builder.Configuration.GetSection("Jwt").Get<JwtSettings>();
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = jwtSettings.Issuer,
        ValidAudience = jwtSettings.Audience,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key))
    };

    options.Events = new JwtBearerEvents
    {
        OnAuthenticationFailed = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogError(context.Exception, "Authentication failed.");
            return Task.CompletedTask;
        },
        OnTokenValidated = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Token validated successfully.");
            return Task.CompletedTask;
        }
    };
});

builder.Services.AddAuthorization();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

// Add the error handling middleware
app.UseMiddleware<ErrorHandlingMiddleware>();

app.MapControllers();

app.Run();
